Transform: AWS::Serverless-2016-10-31
Resources:
  StateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Definition:
        StartAt: createDatasetGroup
        States:
          createDatasetGroup:
            Type: Task
            Resource: arn:aws:states:::lambda:invoke
            Parameters:
              FunctionName: ${createDatasetGroup}
              Payload:
                sampleKey1: sampleValue1
            Next: createSchema
          createSchema:
            Type: Task
            Resource: arn:aws:states:::lambda:invoke
            OutputPath: $.Payload
            Parameters:
              FunctionName: ${createSchema}
              Payload:
                dataSchema:
                  - key1: 123
                  - key2: 456
            Retry:
              - ErrorEquals:
                  - Lambda.ServiceException
                  - Lambda.AWSLambdaException
                  - Lambda.SdkClientException
                  - Lambda.TooManyRequestsException
                IntervalSeconds: 1
                MaxAttempts: 3
                BackoffRate: 2
            Next: createDataset
          createDataset:
            Type: Task
            Resource: arn:aws:states:::lambda:invoke
            OutputPath: $.Payload
            Parameters:
              Payload.$: $
              FunctionName: ${createDataset}
            Retry:
              - ErrorEquals:
                  - Lambda.ServiceException
                  - Lambda.AWSLambdaException
                  - Lambda.SdkClientException
                  - Lambda.TooManyRequestsException
                IntervalSeconds: 1
                MaxAttempts: 3
                BackoffRate: 2
            Next: createEventTracker
          createEventTracker:
            Type: Task
            Resource: arn:aws:states:::lambda:invoke
            OutputPath: $.Payload
            Parameters:
              Payload.$: $
              FunctionName: ${createEventTracker}
            Retry:
              - ErrorEquals:
                  - Lambda.ServiceException
                  - Lambda.AWSLambdaException
                  - Lambda.SdkClientException
                  - Lambda.TooManyRequestsException
                IntervalSeconds: 1
                MaxAttempts: 3
                BackoffRate: 2
            Next: createFilter
          createFilter:
            Type: Task
            Resource: arn:aws:states:::lambda:invoke
            OutputPath: $.Payload
            Parameters:
              Payload.$: $
              FunctionName: ${createFilter}
            Retry:
              - ErrorEquals:
                  - Lambda.ServiceException
                  - Lambda.AWSLambdaException
                  - Lambda.SdkClientException
                  - Lambda.TooManyRequestsException
                IntervalSeconds: 1
                MaxAttempts: 3
                BackoffRate: 2
            Next: createSolution
          createSolution:
            Type: Task
            Resource: arn:aws:states:::lambda:invoke
            OutputPath: $.Payload
            Parameters:
              Payload.$: $
              FunctionName: ${createSolution}
            Retry:
              - ErrorEquals:
                  - Lambda.ServiceException
                  - Lambda.AWSLambdaException
                  - Lambda.SdkClientException
                  - Lambda.TooManyRequestsException
                IntervalSeconds: 1
                MaxAttempts: 3
                BackoffRate: 2
            Next: createSolutionVersion
          createSolutionVersion:
            Type: Task
            Resource: arn:aws:states:::lambda:invoke
            OutputPath: $.Payload
            Parameters:
              Payload.$: $
              FunctionName: ${createSolutionVersion}
            Retry:
              - ErrorEquals:
                  - Lambda.ServiceException
                  - Lambda.AWSLambdaException
                  - Lambda.SdkClientException
                  - Lambda.TooManyRequestsException
                IntervalSeconds: 1
                MaxAttempts: 3
                BackoffRate: 2
            Next: createCampaign
          createCampaign:
            Type: Task
            Resource: arn:aws:states:::lambda:invoke
            OutputPath: $.Payload
            Parameters:
              Payload.$: $
              FunctionName: ${createCampaign}
            Retry:
              - ErrorEquals:
                  - Lambda.ServiceException
                  - Lambda.AWSLambdaException
                  - Lambda.SdkClientException
                  - Lambda.TooManyRequestsException
                IntervalSeconds: 1
                MaxAttempts: 3
                BackoffRate: 2
            End: true
      Logging:
        Level: ALL
        IncludeExecutionData: true
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt StateMachineLogGroup.Arn
      Policies:
        - AWSXrayWriteOnlyAccess
        - Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogDelivery
                - logs:GetLogDelivery
                - logs:UpdateLogDelivery
                - logs:DeleteLogDelivery
                - logs:ListLogDeliveries
                - logs:PutResourcePolicy
                - logs:DescribeResourcePolicies
                - logs:DescribeLogGroups
              Resource: '*'
        - LambdaInvokePolicy:
            FunctionName: !Ref createDatasetGroup
        - LambdaInvokePolicy:
            FunctionName: !Ref createSchema
        - LambdaInvokePolicy:
            FunctionName: !Ref createDataset
        - LambdaInvokePolicy:
            FunctionName: !Ref createEventTracker
        - LambdaInvokePolicy:
            FunctionName: !Ref createFilter
        - LambdaInvokePolicy:
            FunctionName: !Ref createSolution
        - LambdaInvokePolicy:
            FunctionName: !Ref createSolutionVersion
        - LambdaInvokePolicy:
            FunctionName: !Ref createCampaign
      Tracing:
        Enabled: true
      Type: STANDARD
      DefinitionSubstitutions:
        createDatasetGroup: !GetAtt createDatasetGroup.Arn
        createSchema: !GetAtt createSchema.Arn
        createDataset: !GetAtt createDataset.Arn
        createFilter: !GetAtt createFilter.Arn
        createEventTracker: !GetAtt createEventTracker.Arn
        createSolution: !GetAtt createSolution.Arn
        createSolutionVersion: !GetAtt createSolutionVersion.Arn
        createCampaign: !GetAtt createCampaign.Arn
  StateMachineLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub
        - /aws/vendedlogs/states/${AWS::StackName}-${ResourceId}-Logs
        - ResourceId: StateMachine
  createDatasetGroup:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: createDatasetGroup
      CodeUri: src/createDatasetGroup
      Handler: handler.handler
      Runtime: python3.11
      MemorySize: 128
      Timeout: 70
      Tracing: Active
      Policies:
        - AmazonPersonalizeFullAccess
      Environment:
        Variables:
          FUNCTION_FUNCTION_NAME: '!Ref Function'
          FUNCTION_FUNCTION_ARN: '!GetAtt Function.Arn'
  createDatasetGroupLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${createDatasetGroup}
  createDataset:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: createDataset
      CodeUri: src/createDataset
      Handler: handler.handler
      Runtime: python3.11
      MemorySize: 128
      Timeout: 60
      Tracing: Active
      Policies: AmazonPersonalizeFullAccess
  createDatasetLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${createDataset}
  createFilter:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: createFilter
      CodeUri: src/createFilter
      Handler: handler.handler
      Runtime: python3.11
      MemorySize: 128
      Timeout: 70
      Tracing: Active
      Policies: AmazonPersonalizeFullAccess
  createFilterLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${createFilter}
  createEventTracker:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: createEventTracker
      CodeUri: src/createEventTracker
      Handler: handler.handler
      Runtime: python3.11
      MemorySize: 128
      Timeout: 70
      Tracing: Active
      Policies: AmazonPersonalizeFullAccess
  createEventTrackerLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${createEventTracker}
  createSchema:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: createSchema
      CodeUri: src/createSchema
      Handler: handler.handler
      Runtime: python3.11
      MemorySize: 128
      Timeout: 70
      Tracing: Active
      Policies: AmazonPersonalizeFullAccess
  createSchemaLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${createSchema}
  createSolution:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: createSolution
      CodeUri: src/createSolution
      Handler: handler.handler
      Runtime: python3.11
      MemorySize: 128
      Timeout: 70
      Tracing: Active
      Policies: AmazonPersonalizeFullAccess
  createSolutionLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${createSolution}
  createSolutionVersion:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: createSolutionVersion
      CodeUri: src/createSolutionVersion
      Handler: handler.handler
      Runtime: python3.11
      MemorySize: 128
      Timeout: 70
      Tracing: Active
      Policies: AmazonPersonalizeFullAccess
  createSolutionVersionLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${createSolutionVersion}
  createCampaign:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: createCampaign
      CodeUri: src/createCampaign
      Handler: handler.handler
      Runtime: python3.11
      MemorySize: 128
      Timeout: 70
      Tracing: Active
      Policies: AmazonPersonalizeFullAccess
  createCampaignLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${createCampaign}